version: "3"

services:

  kafka1:
    restart: always
    container_name: kafka1
    image: docker.io/bitnami/kafka:3.7
    #ports:
    #  - "9092:9092"
    environment:
      KAFKA_KRAFT_CLUSTER_ID: '6pKOGDCjRJumCIzamlDnig'
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:SSL,CLIENT:SASL_SSL,CONTROLLER:SSL"
      KAFKA_CFG_LISTENERS: "INTERNAL://:9090,CLIENT://:9092,CONTROLLER://kafka1:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://kafka1:9090,CLIENT://kafka1:9092"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      KAFKA_CFG_MESSAGE_MAX_BYTES: 200000000
      KAFKA_CFG_MAX_REQUEST_SIZE: 200000000
      KAFKA_CFG_MAX_PARTITION_FETCH_BYTES: 200000000
      KAFKA_CFG_SSL_KEYSTORE_PASSWORD: kafka-dq
      KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD: kafka-dq
      KAFKA_CFG_CONNECTIONS_MAX_IDLE_MS: 3000000000
      KAFKA_CLIENT_USERS: kafka-dq
      KAFKA_CLIENT_PASSWORDS: KAFKA!dq!2023
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_TLS_TYPE: JKS
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - './secrets/kafka.keystore.jks:/bitnami/kafka/config/certs/kafka.keystore.jks:rw'
      - './secrets/kafka.truststore.jks:/bitnami/kafka/config/certs/kafka.truststore.jks:rw'
      - './secrets/client.config:/opt/bitnami/kafka/config/client.config:ro'
      - 'kafka-data1:/bitnami/kafka'

  kafka-ui:
    image: provectuslabs/kafka-ui:master
    container_name: kafka-ui
    restart: always
    ports:
    - '9090:8080'
    environment:
      - KAFKA_CLUSTERS_0_NAME=csc-ai
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:9092
      - KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL=SASL_SSL
      - KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM=PLAIN
      - KAFKA_CLUSTERS_0_PROPERTIES_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka-dq" password="KAFKA!dq!2023";
      - KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_LOCATION=/certs/kafka.truststore.jks
      - KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_PASSWORD=kafka-dq
      - KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_LOCATION=/certs/kafka.keystore.jks
      - KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_PASSWORD=kafka-dq
      - KAFKA_CLUSTERS_0_PROPERTIES_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=
      #- kafka.clusters.0.serde.0.name=ProtobufFile
      #- kafka.clusters.0.serde.0.topicValuesPattern=sample|validation
      #- kafka.clusters.0.serde.0.properties.protobufFiles.0=/protofiles/Sample.proto
      #- kafka.clusters.0.serde.0.properties.protobufFiles.1=/protofiles/Validation.proto
      #- kafka.clusters.0.serde.0.properties.protobufMessageName=dq.Sample # default type for values
      #- kafka.clusters.0.serde.0.properties.protobufMessageNameByTopic.connector=dq.Sample # values type for topic "Connector"
      #- kafka.clusters.0.serde.0.properties.protobufMessageNameByTopic.sample=dq.Sample # values type for topic "Sample"
      #- kafka.clusters.0.serde.0.properties.protobufMessageNameByTopic.validation=dq.Validation # values type for topic "Salidation"
    volumes:
      - './secrets/kafka.truststore.jks:/certs/kafka.truststore.jks:ro'
      - './secrets/kafka.keystore.jks:/certs/kafka.keystore.jks:ro'
      #- './proto:/protofiles'
   
volumes:
  kafka-data1:
    driver: local